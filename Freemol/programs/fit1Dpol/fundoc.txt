  
  -----------------------------------------------------------------------------
   This File is part of the Frimol package
   (C) 2003 Fabio Mariotti, <fabio.mariotti@scriptsforscience.org>
   Please read the full copyright statment in the COPYING file
  -----------------------------------------------------------------------------
   MODULE f1dp_minuit_function by F.Mariotti
  -----------------------------------------------------------------------------
   $Id: f1dp_minuit_function.F90,v 1.1.1.1 2009/01/12 16:56:08 mariotti Exp $
  -----------------------------------------------------------------------------
   
   DESCRIPTION:
   This is a simple example for MINUIT minimization program
   and contains a simple example of a function to be minimised.
   It contains a single subroutine which is the actual user function
   to be minimised. I DO STRONGLY suggest to write in here only an
   interface to the real function and not the real function itself.
   This help in maintaining... hopefully..
   By the way .. the example is the real function!! ;-)
  
   It does not contain any of the standard functions of Frimol
   programming environment. So no "minuit_function_init"!!!
  
   In order to use it remove the dummy_ string from the name of the module.
   It is here only as template.
   
   TODO: 
   
   
   WARN: 
   
  
  -----------------------------------------------------------------------------
  -----------------------------------------------------------------------------
   
  
  -----------------------------------------------------------------------------
   subroutine minuit_fcn(npar,grad,fval,xval,iflag) 
  -----------------------------------------------------------------------------
   
  
  -----------------------------------------------------------------------------
    
    From the manual of Minuit we read:
    INPUT parameters:
    npar	number of currently variable parameters.
    xval	vector of (constant orvariable) parameters.
    iflag	indicate what is to be calculated.
    (futil)	removed in this version.
    OUTPUT parameters:
    fval	The calculated function value.
    grad	The (optional) vector of first derivatives.
    
    You should declare the parameters as follow:
    npar	integer(FINT), intent(in) :: npar
    xval	real(FREAL), dimension(:), intent(in) ::  xval
    iflag	integer(FINT), intent(in) :: iflag
    fval	real(FREAL), intent(out) :: fval
    grad	real(FREAL), intent(out), optional :: grad
    
    
    
    
    
    
  -----------------------------------------------------------------------------
  
  -----------------------------------------------------------------------------
  -----------------------------------------------------------------------------
   integer(FINT) function f1dp_minuit_function_init()
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  
   This routine initialize (put to zero or default) the data for minuit.
  
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  -----------------------------------------------------------------------------
   integer(FINT) function funct_polyn(npar,grad,fval,xval,iflag)
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  
   The acctual polynom function
  
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  -----------------------------------------------------------------------------
   integer(FINT) function f_poly(npc,pc,npt,vpt,ypt)
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  
   A tools function to evaluate a polynimial
  
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  -----------------------------------------------------------------------------
   integer(FINT) function funct_polys(npar,grad,fval,xval,iflag)
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  
   The actual polys function which is like poly but shift the X as parameter!
  
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  -----------------------------------------------------------------------------
   integer(FINT) function funct_morse(npar,grad,fval,xval,iflag)
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  
   The acctual simple morse function
  
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  -----------------------------------------------------------------------------
   integer(FINT) function funct_polyd(npar,grad,fval,xval,iflag)
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  
   The acctual polyd function: multidim fit
  
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  -----------------------------------------------------------------------------
   PROGRAM fit1Dpol  Frimol by F.Mariotti:
  -----------------------------------------------------------------------------
   $Id: fit1Dpol.F90,v 1.1.1.1 2009/01/12 16:56:08 mariotti Exp $
  -----------------------------------------------------------------------------
   This File is part of the Frimol package
   (C) 2003 Fabio Mariotti, <fabio.mariotti@scriptsforscience.org>
   Please read the full copyright statment in the COPYING file
  -----------------------------------------------------------------------------
   
   DESCRIPTION:
   
   
   TODO: 
   
   
   WARN: 
   
  
   ADDING A NEW FUNCTION HELP: 
   
   1) Write the code
      
      - open the file fit1Dpol_commons.F90
      - add you function as integer identifier of the type
        FUN_XXXXX=Y where Y is a free handle
        just after the other definitions: search for "FUN_DUMMY=0".
      
      - open the file f1dp_minuit_function.F90
        Search for the subroutine minuit_fcn ("subroutine minuit_fcn")
        Add a case in the select tree of this function: Last case is "case default"
        just before it add a case statment like this one:
      
      case(FUN_XXXXX)
         irc=funct_XXXXX(npar,grad,fval,xval,iflag)
         return
      
      The actual arguments to the function can change with versions please check it!
      These have to be the same as for "subroutine minuit_fcn".
      
      - Add your actual function code.
        The best idea is to copy an existing one like for example "funct_polyn"
        and even a best idea is to call your function "funct_XXXXX"!
      
      - You have to make sure that your function gets readed in the input file
        the function f1dp_minuit_function_init sets it. So search for
        this function
        ("function f1dp_minuit_function_init"). At present the only thing this
        init
        does is to set the correct parameter once it has the function name
        so don't
        get lost and add something like this just before the last (lonly) else:
      
      else if(index(f1dp_funame,'XXXXX').gt.0) then
         f1dp_flags(FLG_FUNC)=FUN_XXXXX
         nfpars=f1dp_numpar
      
      Note that we set the actual number of parameters just in case
      in principle you should WARN about that!
      
      - You are done!
      
      - PLEASE TEST IT!
      
      - THINGS TO PAY ATTENTION AND REMINDER
      
      Data are in f1dp_data(f1dp_numrec,f1dp_numcol)
      with dimensions: f1dp_numrec,f1dp_numcol
      
      Parameters are in xval(f1dp_numpar) if you used very same variable names 
      
      WARN: The npar input variable is the actual number of free parameters! WARN
      
      For iflag read MINUIT manual but in general: iflag=
      1 called once at the beginning for any setup/init (note data are already stored)
      2 called to obtain derivatives: if unsure reset them and minuit will check
        versus numerical ones.
      3 called at end and should print the results
      
      The function should always return it's own value (in fval if very same vars)
      
      The function is an integer function and should return 0 if no error or
      return a negative number if error (eventual value can set the error code)
      
      Order of parameters is your own buisness i.e. it is the very same as imput
      but you can eventually use the name of the parameters stored in 
      f1dp_parnames(f1dp_numpar). But you will slow down the code!
      
      You can use all the fit1Dpol_commons.F90 data but remember that it is Minuit
      that calls you!
      
      
  
  -----------------------------------------------------------------------------
  -----------------------------------------------------------------------------
   
  
  -----------------------------------------------------------------------------
  -----------------------------------------------------------------------------
   Function fit1Dpol_init(f1dp_flags)
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  
   This routine initialize the fit1Dpol module.
  
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
   logical function fit1Dpol_isinit()
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
   We merelyreturn the initialization flag.
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  -----------------------------------------------------------------------------
   character(FLCHARS) function fit1Dpol_geterror()
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
   
   Return the error code of the module in Object oriented
   programming style. It is a part of a set of routine to return errors.
   See the discussion in the interface.
   
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  -----------------------------------------------------------------------------
   Function fit1Dpol_rdinput(f1dp_iunin,f1dp_iunout,f1dp_flags)
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  
   This routine read the input file
  
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
   This File is part of the Frimol package
   (C) 2003 Fabio Mariotti, <fabio.mariotti@scriptsforscience.org>
   Please read the full copyright statment in the COPYING file
  -----------------------------------------------------------------------------
   MODULE fit1Dpol_commons by F.Mariotti
  -----------------------------------------------------------------------------
   $Id: fit1Dpol_commons.F90,v 1.1.1.1 2009/01/12 16:56:08 mariotti Exp $
  -----------------------------------------------------------------------------
   
   DESCRIPTION:
  
   A "modern" F90 common.
   Contains all the data that should flows in all the modules!
   
   TODO: 
   
   
   WARN: 
   
  
  -----------------------------------------------------------------------------
  -----------------------------------------------------------------------------
   
  
  -----------------------------------------------------------------------------
  -----------------------------------------------------------------------------
   integer(FINT) function fit1Dpol_commons_reset()
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  
   This routine reset (put to zero or default) the common data
  
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
   This File is part of the Frimol package
   This is a fortran 90 port of the original (1999) F77 minuit downloaded
   from http://www.cern.ch/. See there the current copyright statment.
  -----------------------------------------------------------------------------
   MODULE FIT1DPOL_MINUIT for Frimol by F.Mariotti
  -----------------------------------------------------------------------------
   $Id: fit1Dpol_minuit.F90,v 1.1.1.1 2009/01/12 16:56:08 mariotti Exp $
  -----------------------------------------------------------------------------
  
   DESCRIPTION:
   This is the cern package minuit ported to fortran90 for the Frimol package
   and it is quite in beta release!!!! Please check for minuit at the
   CERN web page: http://www.cern.ch/
  
   TODO:
  
  
   WARN:
  
   HERE SOME LINES FROM THE ORIGINAL VERSION:
       *
       * Revision 1.1  2002/07/19 01:44:03  fmariot
       * Just added minuit files but to be configured
       *
       * Revision 1.1.1.1  1996/03/07 14:31:28  mclareni
       * Minuit
       *
       *
  
   HERE THE OLD DOCS:
  
       CPNAM   Parameter name (10 characters)
       U       External (visible to user in FCN) value of parameter
       ALIM, BLIM Lower and upper parameter limits. If both zero, no limi
       ERP,ERN Positive and negative MINOS errors, if calculated.
       WERR    External parameter error (standard deviation, defined by U
       GLOBCC  Global Correlation Coefficient
       NVARL   =-1 if parameter undefined,      =0 if constant,
       = 1 if variable without limits,  =4 if variable with limits
       (Note that if parameter has been fixed, NVARL=1 or =4, and NIOFEX=
       NIOFEX  Internal parameter number, or zero if not currently variab
       NEXOFI  External parameter number for currently variable parameter
       X, XT   Internal parameter values (X are sometimes saved in XT)
       DIRIN   (Internal) step sizes for current step
       variables with names ending in ..S are saved values for fixed para
       VHMAT   (Internal) error matrix stored as Half MATrix, since
       it is symmetric
       VTHMAT  VHMAT is sometimes saved in VTHMAT, especially in MNMNOT
  
       ISW definitions:
        ISW(1) =0 normally, =1 means CALL LIMIT EXCEEDED
        ISW(2) =0 means no error matrix
               =1 means only approximate error matrix
               =2 means full error matrix, but forced pos-def.
               =3 means good normal full error matrix exists
        ISW(3) =0 if Minuit is calculating the first derivatives
               =1 if first derivatives calculated inside FCN
        ISW(4) =-1 if most recent minimization did not converge.
               = 0 if problem redefined since most recent minimization.
               =+1 if most recent minimization did converge.
        ISW(5) is the PRInt level.  See SHO PRIntlevel
        ISW(6) = 0 for batch mode, =1 for interactive mode
                        =-1 for originally interactive temporarily batch
  
       LWARN is true if warning messges are to be put out (default=true)
              SET WARN turns it on, set NOWarn turns it off
       LREPOR is true if exceptional conditions are put out (default=fals
              SET DEBUG turns it on, SET NODebug turns it off
       LIMSET is true if a parameter is up against limits (for MINOS)
       LNOLIM is true if there are no limits on any parameters (not yet u
       LNEWMN is true if the previous process has unexpectedly improved F
       LPHEAD is true if a heading should be put out for the next paramet
          definition, false if a parameter has just been defined
  
  -----------------------------------------------------------------------------
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  -----------------------------------------------------------------------------
   integer(FINT) function minuit_init(ird,iwr,isv)
  -----------------------------------------------------------------------------
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  
   This routine initialize the minuit module.
  
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
   logical function minuit_isinit()
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
   We merelyreturn the initialization flag.
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  -----------------------------------------------------------------------------
   integer(FINT) function minuit_geterror_i()
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  
   Return the error code of the module.
  
  -----------------------------------------------------------------------------
  
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  -----------------------------------------------------------------------------
   character(FLCHARS) function minuit_geterror_c()
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  
   Return the error code of the module in Object oriented
   programming style. It is a part of a set of routine to return errors.
   See the discussion in the interface.
  
  -----------------------------------------------------------------------------
  
  
  -----------------------------------------------------------------------------
  -----------------------------------------------------------------------------
   HERE STARTS THE PORTED CODE!
  -----------------------------------------------------------------------------
  -----------------------------------------------------------------------------
  
